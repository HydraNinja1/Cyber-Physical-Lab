#include "arduino_secrets.h"

/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/43bdbe76-a932-4094-972b-c0e75c3d39a2 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  int DisplayValue;
  int DisplayValue_2;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
#include "Wire.h"

const bool Numbers[11][7] = {{1,1,1,1,1,1,0}, //zero
                             {0,1,1,0,0,0,0}, //one
                             {1,1,0,1,1,0,1}, //two
                             {1,1,1,1,0,0,1}, //three
                             {0,1,1,0,0,1,1}, //four
                             {1,0,1,1,0,1,1}, //five
                             {1,0,1,1,1,1,1}, //six
                             {1,1,1,0,0,0,0}, //seven
                             {1,1,1,1,1,1,1}, //eight
                             {1,1,1,0,0,1,1}, //nine
                             {0,0,0,0,0,0,0} //Clear Display
};

#define ClearDisplay 10

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
  
  Wire.begin();        // join i2c bus (address optional for master)
  Serial.begin(9600);
  //define pin modes
  pinMode(2,OUTPUT); //Segement A
  pinMode(3,OUTPUT); //Segement B
  pinMode(4,OUTPUT); //Segement C
  pinMode(5,OUTPUT); //Segement D
  pinMode(6,OUTPUT); //Segement E
  pinMode(7,OUTPUT); //Segement F
  pinMode(8,OUTPUT); //Segement G
  pinMode(9,OUTPUT); //Segement Decimal Point

  displayNumber(ClearDisplay); //make sure the display is off
}

int displayNumber(int numberToDisplay)
{
  int pin = 2;
  for(int segment = 0;segment<7;segment++)
  {
    digitalWrite(pin, Numbers[numberToDisplay][segment]);
    pin++;
  }
  return numberToDisplay;
}

void loop() {
  ArduinoCloud.update();
  // Your code here 
  
  // first read in the generated voltage
  int GeneratedValue = analogRead(A0);
  // now we map it to a much smaller range, as we only have a single 0-9 display.
  DisplayValue = map(GeneratedValue, 0, 1023, 0, 9);
  displayNumber(DisplayValue);
  String str1 = "The 1st Voltage Generated: ";
  Serial.print(str1); Serial.println(DisplayValue);
  // add a small delay so that the number doesnt change to rapidly to read.
  delay(500);

  Wire.requestFrom(8, 1);    // request 1 byte from peripheral device #8
  while (Wire.available()) { // peripheral may send less than requested
    DisplayValue_2 = Wire.read(); // receive a byte as character
    String str2 = "The 2nd Voltage Generated: ";
    Serial.print(str2); Serial.println(DisplayValue_2); Serial.println();  // print the character
  }
}

/*
  Since DisplayValue is READ_WRITE variable, onDisplayValueChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onDisplayValueChange()  {
  // Add your code here to act upon DisplayValue change
}

/*
  Since DisplayValue2 is READ_WRITE variable, onDisplayValue2Change() is
  executed every time a new value is received from IoT Cloud.
*/
void onDisplayValue2Change()  {
  // Add your code here to act upon DisplayValue2 change
}

